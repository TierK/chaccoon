/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Account } from '../models/account';
import { createAccount } from '../fn/accounts/create-account';
import { CreateAccount$Params } from '../fn/accounts/create-account';
import { deleteAccount } from '../fn/accounts/delete-account';
import { DeleteAccount$Params } from '../fn/accounts/delete-account';
import { getAccountById } from '../fn/accounts/get-account-by-id';
import { GetAccountById$Params } from '../fn/accounts/get-account-by-id';
import { getAllAccounts } from '../fn/accounts/get-all-accounts';
import { GetAllAccounts$Params } from '../fn/accounts/get-all-accounts';
import { getTestAccounts } from '../fn/accounts/get-test-accounts';
import { GetTestAccounts$Params } from '../fn/accounts/get-test-accounts';
import { updateAccount } from '../fn/accounts/update-account';
import { UpdateAccount$Params } from '../fn/accounts/update-account';


/**
 * Operations for managing user accounts
 */
@Injectable({ providedIn: 'root' })
export class ApiAccountsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllAccounts()` */
  static readonly GetAllAccountsPath = '/accounts';

  /**
   * Get a list of all accounts.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAccounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAccounts$Response(params?: GetAllAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Account>>> {
    return getAllAccounts(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a list of all accounts.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAccounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAccounts(params?: GetAllAccounts$Params, context?: HttpContext): Observable<Array<Account>> {
    return this.getAllAccounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Account>>): Array<Account> => r.body)
    );
  }

  /** Path part for operation `createAccount()` */
  static readonly CreateAccountPath = '/accounts';

  /**
   * Create a new account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount$Response(params: CreateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<Account>> {
    return createAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount(params: CreateAccount$Params, context?: HttpContext): Observable<Account> {
    return this.createAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<Account>): Account => r.body)
    );
  }

  /** Path part for operation `getTestAccounts()` */
  static readonly GetTestAccountsPath = '/accounts/test_accounts';

  /**
   * Get a list of test accounts.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTestAccounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestAccounts$Response(params?: GetTestAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Account>>> {
    return getTestAccounts(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a list of test accounts.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTestAccounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestAccounts(params?: GetTestAccounts$Params, context?: HttpContext): Observable<Array<Account>> {
    return this.getTestAccounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Account>>): Array<Account> => r.body)
    );
  }

  /** Path part for operation `getAccountById()` */
  static readonly GetAccountByIdPath = '/accounts/{accountId}';

  /**
   * Get an account by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAccountById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccountById$Response(params: GetAccountById$Params, context?: HttpContext): Observable<StrictHttpResponse<Account>> {
    return getAccountById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get an account by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAccountById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccountById(params: GetAccountById$Params, context?: HttpContext): Observable<Account> {
    return this.getAccountById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Account>): Account => r.body)
    );
  }

  /** Path part for operation `deleteAccount()` */
  static readonly DeleteAccountPath = '/accounts/{accountId}';

  /**
   * Delete an account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAccount$Response(params: DeleteAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete an account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAccount(params: DeleteAccount$Params, context?: HttpContext): Observable<void> {
    return this.deleteAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateAccount()` */
  static readonly UpdateAccountPath = '/accounts/{accountId}';

  /**
   * Update an existing account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount$Response(params: UpdateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<Account>> {
    return updateAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount(params: UpdateAccount$Params, context?: HttpContext): Observable<Account> {
    return this.updateAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<Account>): Account => r.body)
    );
  }

}
